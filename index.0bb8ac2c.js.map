{"mappings":"AAmZA,SAAAA,kBAAAC,EAAAC,I,m8BAAA,IAAMC,SAAWC,SAASC,cAAc,aAClCC,UAAYF,SAASC,cAAc,iBAIzC,SAASE,cACL,IAAMC,EAAUC,mBAAIH,UAAUI,UAAUC,KAAI,W,OAAMC,e,IAElDC,QAAQC,WAAWN,GACRO,MAAK,SAAAC,GACDC,QAAQC,IAAIF,E,IAK/B,SAASJ,gBACL,OAAO,IAAIC,SAAQ,SAACM,EAASC,GACVC,KAAKC,SAER,GACRH,EAAQ,MAELC,EAAI,K,IAnBnBjB,SAASoB,iBAAiB,QAAShB","sources":["src/script.js"],"sourcesContent":["                                  // Урок 9.1\n\n\n\n// Додатковий матеріал для самостійного ознайомлення\n// Event loop documentation\n// https://bool.dev/blog/detail/obyasnenie-event-loop-v-javascript-s-pomoshchyu-vizualizatsii\n// https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif\n\n// for (let i = 3; i > 0; i-- ){\n//     // console.log(i);\n//     const delay = i * 1000;\n//     console.log(delay);\n//     setTimeout(() => console.log(i), delay);\n// }\n\n\n\n// Приклад використання setTimeout - можна передати що завгодно (масив, обʼєкти і тд )\n\n// const timerId = setTimeout((obj) => { \n// console.log(obj.name, obj.user);\n// }, 1000,{name: \"Alice\", user: \"Vica\"});\n\n// console.log(typeof timerId);\n\n// clearTimeout(timerId)\n\n\n\n// Приклад використання setInterval \n\n// const id = setInterval((name) => {\n// console.log(name);\n// }, 1000, \"Alice\");\n\n// clearInterval(id);\n\n\n\n//Приклад використання setInterval & setTimeout \n// Створимо блок з рекламою яка зникне через 10 секунд\n\n\n// const container = document.querySelector(\".js-content\");\n// const text = document.querySelector(\".js-text\");\n// let count = 10;\n\n// text.textContent = `Залишилося ${count} секунд`;\n\n// const id = setInterval(() => {\n//     count -=1;\n//     text.textContent = `Залишилося ${count} секунд`;\n// }, 1000);\n\n// setTimeout(() => {\n//      clearInterval(id)\n//      container.style.display = \"none\";\n// }, 1000 * count);\n\n\n\n//Синхронний та асинхронний JavaScript\n\n// console.log(\"a\");\n// console.log(\"b\");\n\n// for(let i = 0; i < 100000000000; i++){\n\n// }\n\n// setTimeout(() => {\n//        console.log(\"b\");\n// }, 1000);\n\n// console.log(\"c\");\n\n\n\n              //Class DATE\n\n// const currentDate = new Date();\n// console.log(currentDate);\n\n// console.log(Date.now());\n\n// const targetDate = new Date(1701296269997);\n// console.log(targetDate);\n\n// const targetDate = new Date(\"2023/12/25\");\n// console.log(targetDate);\n\n// console.log(targetDate - currentDate);\n\n\n\n\n// Практика\n// Потрібно створити два приклади годинника \n// (Електронний та механічний)\n\n// const arrDay = ['Неділя', 'Понеділок', 'Вівторок', 'Середа', 'Четвер', 'П`ятниця', 'Субота'];\n// const namesOfMonth = ['Січень', 'Лютий', 'Березень', 'Квітень', 'Травень', 'Червень', 'Липень', 'Серпень', 'Вересень', 'Жовтень', 'Листопад', 'Грудень'];\n\n// const selectors = {\n//        day: document.querySelector(\".date-day\"),\n//        date: document.querySelector(\".date\"),\n//        month: document.querySelector(\".date-month\"),\n//        year: document.querySelector(\".date-year\"),\n//        clock: document.querySelector(\".digital-clock\"),\n//        seconds: document.querySelector(\".clock-seconds__arrow\"),\n//        minutes: document.querySelector(\".clock-minutes__arrow\"),\n//        hours: document.querySelector(\".clock-hours__arrow\"),\n// };\n\n// setInterval(() => {\n//     const currentDate = new Date()\n//     // console.log(currentDate);\n\n//     const day = currentDate.getDay();\n//     // console.log(day);\n\n//     const date = currentDate.getDate()\n//     // console.log(date);\n\n//     const month = currentDate.getMonth()\n//     // console.log(month);\n\n//     const year = currentDate.getFullYear();\n//     // console.log(year);\n\n\n//     const localeTime = currentDate.toLocaleTimeString(\"fr-FR\");\n//     // console.log(localeTime);\n\n//     selectors.day.textContent = arrDay[day];\n//     selectors.month.textContent = namesOfMonth[month];\n//     selectors.date.textContent = date;\n//     selectors.year.textContent = year;\n//     selectors.clock.textContent = `Поточний час ${localeTime}`;\n\n//     const hours = currentDate.getHours();\n//     const minutes = currentDate.getMinutes();\n//     const seconds = currentDate.getSeconds();\n\n//     const secondsDeg = 360 / 60 * seconds;\n//     const minutesDeg = 360 / 60 * minutes;\n//     const hoursDeg = 360 / 12 * hours + (360 / 12 / 60) * minutes;\n\n//     selectors.seconds.style.transform = `rotate(${secondsDeg}deg)`;\n//     selectors.minutes.style.transform = `rotate(${minutesDeg}deg)`;\n//     selectors.hours.style.transform = `rotate(${hoursDeg}deg)`;\n\n// }, 1000);\n\n\n                    // Урок 9.2\n\n\n// const promise = new Promise((resolve, reject) => {\n//      reject(\"Woops\")\n// })\n\n// promise.then(value => console.log(value));\n\n\n// const promise = new Promise((resolve, reject) => {\n//     resolve(\"Woops\")\n// })\n\n// promise.then(value => console.log(value));\n\n\n// const promise = new Promise((resolve, reject) => {\n//     reject(\"Woops\")\n// })\n\n// promise.catch(err => console.log(err));\n\n\n// const promise = new Promise((resolve) => {\n//     resolve(10)\n// })\n\n// promise\n//        .then(value => {\n//              return new Promise (resolve => {\n//                 resolve(value * 2)\n//                })\n//             })\n\n//         .then(value => console.log(value));\n\n\n\n//Приклад роботи синхронного та асинхронного JS\n\n\n// console.log(\"A\");\n\n// setTimeout(() => {\n//     console.log(\"B\");\n// }, 0)\n\n// Promise.resolve(\"C\")\n//        .then(data => console.log(data));\n\n// console.log(\"D\");\n\n\n                                      //Promise\n\n//Створення Promise\n\n// const loading = document.querySelector(\".loading\")\n// const content = document.querySelector(\".content\")\n\n// const promise = new Promise((resolve, reject) => {\n//     const random = Math.random() * 2000;\n//     loading.textContent = \"Loading...\"\n\n//     setTimeout(() => {\n//         if(random > 1000){\n//              resolve(\"Drink beer\")\n//         } else {\n//             reject(\"Go home\")\n//         }\n//     }, 2000)\n// })\n\n// console.log(promise);\n\n// promise \n//       .then(data => {\n//               loading.textContent = \"\"\n//             //   content.textContent = data\n\n//       })\n//       .catch(error => {\n//              loading.textContent = \"\";\n//             //  content.textContent = error\n//       })\n//       .finally(() => {\n//         loading.textContent = \"\";\n//       })\n\n\n//Обробка Propmise\n\n// promise \n//       .then(data => {\n//               loading.textContent = \"\"\n//             //   content.textContent = data\n\n//       })\n//       .catch(error => {\n//              loading.textContent = \"\";\n//             //  content.textContent = error\n//       })\n//       .finally(() => {\n//         loading.textContent = \"\";\n//       })\n\n\n\n// const result = new Promise((resolve, reject) => {\n//     const random = Math.random();\n\n//      setTimeout(() => {\n//                 if(random > 1000){\n//                      resolve(\"resolve\")\n//                 } else {\n//                     reject(\"reject\")\n//                 }\n//             }, 2000)\n\n// })\n\n// result\n//      .then(res => console.log(res))\n//      .catch(error => console.log(error))\n\n\n//1)  const test = () => {\n//     console.log(\"ok\");\n// }\n\n// test();\n\n\n//2)  const test = () => {\n//     return \"ok\"\n// }\n\n// console.log(test());\n\n\n//3)  const test = () => {\n//     return new Promise(resolve => {\n//         resolve(\"ok\")\n//     })\n// }\n\n// console.log(test());\n\n\n//4)  const test = (time) => {\n//     return new Promise(resolve => {\n//         resolve(time)\n//     })\n// }\n\n// console.log(test(1000));\n\n\n//5)   const test = (time) => {\n//     return new Promise(resolve => {\n//         resolve(time)\n//     })\n// }\n\n// test(1000)\n//        .then(data => console.log(data))\n\n\n\n// const test = time => {\n//     return new Promise((resolve, reject) => {\n//         setTimeout(() => resolve(time), time)\n//     })\n// }\n\n// test (1000)\n//         .then(result => console.log(result))\n\n\n// test (3000)\n//         .then(result => console.log(result))\n\n\n// Promise.all([test(1000), test(3000)])\n//          .then(data => console.log(data))\n\n\n// Promise.all([test(3000), test(1000), test(2000)])\n//          .then(data => console.log(data))\n//          .catch(error => console.log(error))\n\n\n\n// const result = new Promise((resolve, reject) => {\n//     const random = Math.random();\n\n//     setTimeout(() => {\n//         if(random > 0.5){\n//             resolve(\"resolve\")\n//         } else {\n//             reject(\"reject\")\n//         }\n//     }, 2000)\n// })\n\n// Promise.all([result, result])\n//         .then(data => console.log(data))\n//         .catch(error => console.log(error))\n\n\n\n// const test = function (time) {\n//     return new Promise((resolve, reject) => {\n//         setTimeout(() => resolve(time), time)\n//     })\n// }\n\n// Promise.race([test(1000), test(3000)]) - повертає той, який виконується швидше. Навіть, якщо він повертається з помилкою\n//     .then(data => console.log(data))\n//     .catch(err => console.log(\"error\", err))\n\n\n\n\n// ****************************Практика************************* \\\\\n// Наше завдання написати програмне забезпечення для ігрового автомата\n// Для вирішення завдання використай готову розмітку HTML\n// та базову стилізацію\n// Після натиснення на кнопку \"Start game\" в кожному віконці по\n// черзі має з'являтись смайлик з затримкою в 1 секунду\n// ('🤑' або '👿')\n// Під час обробки кожного віконця створи масив з Promis-ами\n// в якому кожен з них буде відповідати за своє віконце,\n// після чого оброби даний масив за допомогою методу\n// Promise.allSettled\n// Після того як всі віконця були заповнені потрібно щоб скріпт\n// автоматично визначав чи гравець переміг, чи ні.\n// Якщо в кожному віконці однаковий смайлик це означає що користувач\n// переміг\n// Виводить модальне вікно з повідомленням про статус гри\n// ('Winner' або 'Loser')\n// Для модального вікна використовуй бібліотеку basicLightbox\n// Після повторного натискання на кнопку \"Start game\"\n// поле має очищатись, а гра починатись з початку.\n\n\nconst startBtn = document.querySelector(\".js-start\");\nconst container = document.querySelector(\".js-container\");\n\nstartBtn.addEventListener(\"click\", handleStart)\n\nfunction handleStart() {\n    const promise = [...container.children].map(() => createPromise())\n\n    Promise.allSettled(promise)\n              .then(items => {\n                   console.log(items);\n              })\n            //   .catch()\n}\n\nfunction createPromise() {\n    return new Promise((resolve, reject) => {\n        const random = Math.random()\n\n        if(random > 0.5){\n            resolve(\"🤑\")\n        } else {\n            reject(\"👿\")\n        }\n     })\n}\n\n\n"],"names":["_arrayLikeToArray","arr","len","startBtn","document","querySelector","container","handleStart","promise","_toConsumableArray","children","map","createPromise","Promise","allSettled","then","items","console","log","resolve","reject","Math","random","addEventListener"],"version":3,"file":"index.0bb8ac2c.js.map"}