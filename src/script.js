                                  // –£—Ä–æ–∫ 9.1



// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è
// Event loop documentation
// https://bool.dev/blog/detail/obyasnenie-event-loop-v-javascript-s-pomoshchyu-vizualizatsii
// https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif

// for (let i = 3; i > 0; i-- ){
//     // console.log(i);
//     const delay = i * 1000;
//     console.log(delay);
//     setTimeout(() => console.log(i), delay);
// }



// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è setTimeout - –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ (–º–∞—Å–∏–≤, –æ–± º—î–∫—Ç–∏ —ñ —Ç–¥ )

// const timerId = setTimeout((obj) => { 
// console.log(obj.name, obj.user);
// }, 1000,{name: "Alice", user: "Vica"});

// console.log(typeof timerId);

// clearTimeout(timerId)



// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è setInterval 

// const id = setInterval((name) => {
// console.log(name);
// }, 1000, "Alice");

// clearInterval(id);



//–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è setInterval & setTimeout 
// –°—Ç–≤–æ—Ä–∏–º–æ –±–ª–æ–∫ –∑ —Ä–µ–∫–ª–∞–º–æ—é —è–∫–∞ –∑–Ω–∏–∫–Ω–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥


// const container = document.querySelector(".js-content");
// const text = document.querySelector(".js-text");
// let count = 10;

// text.textContent = `–ó–∞–ª–∏—à–∏–ª–æ—Å—è ${count} —Å–µ–∫—É–Ω–¥`;

// const id = setInterval(() => {
//     count -=1;
//     text.textContent = `–ó–∞–ª–∏—à–∏–ª–æ—Å—è ${count} —Å–µ–∫—É–Ω–¥`;
// }, 1000);

// setTimeout(() => {
//      clearInterval(id)
//      container.style.display = "none";
// }, 1000 * count);



//–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π JavaScript

// console.log("a");
// console.log("b");

// for(let i = 0; i < 100000000000; i++){

// }

// setTimeout(() => {
//        console.log("b");
// }, 1000);

// console.log("c");



              //Class DATE

// const currentDate = new Date();
// console.log(currentDate);

// console.log(Date.now());

// const targetDate = new Date(1701296269997);
// console.log(targetDate);

// const targetDate = new Date("2023/12/25");
// console.log(targetDate);

// console.log(targetDate - currentDate);




// –ü—Ä–∞–∫—Ç–∏–∫–∞
// –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–≤–∞ –ø—Ä–∏–∫–ª–∞–¥–∏ –≥–æ–¥–∏–Ω–Ω–∏–∫–∞ 
// (–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π —Ç–∞ –º–µ—Ö–∞–Ω—ñ—á–Ω–∏–π)

// const arrDay = ['–ù–µ–¥—ñ–ª—è', '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü`—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞'];
// const namesOfMonth = ['–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å', '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'];

// const selectors = {
//        day: document.querySelector(".date-day"),
//        date: document.querySelector(".date"),
//        month: document.querySelector(".date-month"),
//        year: document.querySelector(".date-year"),
//        clock: document.querySelector(".digital-clock"),
//        seconds: document.querySelector(".clock-seconds__arrow"),
//        minutes: document.querySelector(".clock-minutes__arrow"),
//        hours: document.querySelector(".clock-hours__arrow"),
// };

// setInterval(() => {
//     const currentDate = new Date()
//     // console.log(currentDate);

//     const day = currentDate.getDay();
//     // console.log(day);

//     const date = currentDate.getDate()
//     // console.log(date);

//     const month = currentDate.getMonth()
//     // console.log(month);

//     const year = currentDate.getFullYear();
//     // console.log(year);


//     const localeTime = currentDate.toLocaleTimeString("fr-FR");
//     // console.log(localeTime);

//     selectors.day.textContent = arrDay[day];
//     selectors.month.textContent = namesOfMonth[month];
//     selectors.date.textContent = date;
//     selectors.year.textContent = year;
//     selectors.clock.textContent = `–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å ${localeTime}`;

//     const hours = currentDate.getHours();
//     const minutes = currentDate.getMinutes();
//     const seconds = currentDate.getSeconds();

//     const secondsDeg = 360 / 60 * seconds;
//     const minutesDeg = 360 / 60 * minutes;
//     const hoursDeg = 360 / 12 * hours + (360 / 12 / 60) * minutes;

//     selectors.seconds.style.transform = `rotate(${secondsDeg}deg)`;
//     selectors.minutes.style.transform = `rotate(${minutesDeg}deg)`;
//     selectors.hours.style.transform = `rotate(${hoursDeg}deg)`;

// }, 1000);


                    // –£—Ä–æ–∫ 9.2


// const promise = new Promise((resolve, reject) => {
//      reject("Woops")
// })

// promise.then(value => console.log(value));


// const promise = new Promise((resolve, reject) => {
//     resolve("Woops")
// })

// promise.then(value => console.log(value));


// const promise = new Promise((resolve, reject) => {
//     reject("Woops")
// })

// promise.catch(err => console.log(err));


// const promise = new Promise((resolve) => {
//     resolve(10)
// })

// promise
//        .then(value => {
//              return new Promise (resolve => {
//                 resolve(value * 2)
//                })
//             })

//         .then(value => console.log(value));



//–ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–±–æ—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ JS


// console.log("A");

// setTimeout(() => {
//     console.log("B");
// }, 0)

// Promise.resolve("C")
//        .then(data => console.log(data));

// console.log("D");


                                      //Promise

//–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Promise

// const loading = document.querySelector(".loading")
// const content = document.querySelector(".content")

// const promise = new Promise((resolve, reject) => {
//     const random = Math.random() * 2000;
//     loading.textContent = "Loading..."

//     setTimeout(() => {
//         if(random > 1000){
//              resolve("Drink beer")
//         } else {
//             reject("Go home")
//         }
//     }, 2000)
// })

// console.log(promise);

// promise 
//       .then(data => {
//               loading.textContent = ""
//             //   content.textContent = data

//       })
//       .catch(error => {
//              loading.textContent = "";
//             //  content.textContent = error
//       })
//       .finally(() => {
//         loading.textContent = "";
//       })


//–û–±—Ä–æ–±–∫–∞ Propmise

// promise 
//       .then(data => {
//               loading.textContent = ""
//             //   content.textContent = data

//       })
//       .catch(error => {
//              loading.textContent = "";
//             //  content.textContent = error
//       })
//       .finally(() => {
//         loading.textContent = "";
//       })



// const result = new Promise((resolve, reject) => {
//     const random = Math.random();

//      setTimeout(() => {
//                 if(random > 1000){
//                      resolve("resolve")
//                 } else {
//                     reject("reject")
//                 }
//             }, 2000)

// })

// result
//      .then(res => console.log(res))
//      .catch(error => console.log(error))


//1)  const test = () => {
//     console.log("ok");
// }

// test();


//2)  const test = () => {
//     return "ok"
// }

// console.log(test());


//3)  const test = () => {
//     return new Promise(resolve => {
//         resolve("ok")
//     })
// }

// console.log(test());


//4)  const test = (time) => {
//     return new Promise(resolve => {
//         resolve(time)
//     })
// }

// console.log(test(1000));


//5)   const test = (time) => {
//     return new Promise(resolve => {
//         resolve(time)
//     })
// }

// test(1000)
//        .then(data => console.log(data))



// const test = time => {
//     return new Promise((resolve, reject) => {
//         setTimeout(() => resolve(time), time)
//     })
// }

// test (1000)
//         .then(result => console.log(result))


// test (3000)
//         .then(result => console.log(result))


// Promise.all([test(1000), test(3000)])
//          .then(data => console.log(data))


// Promise.all([test(3000), test(1000), test(2000)])
//          .then(data => console.log(data))
//          .catch(error => console.log(error))



// const result = new Promise((resolve, reject) => {
//     const random = Math.random();

//     setTimeout(() => {
//         if(random > 0.5){
//             resolve("resolve")
//         } else {
//             reject("reject")
//         }
//     }, 2000)
// })

// Promise.all([result, result])
//         .then(data => console.log(data))
//         .catch(error => console.log(error))



// const test = function (time) {
//     return new Promise((resolve, reject) => {
//         setTimeout(() => resolve(time), time)
//     })
// }

// Promise.race([test(1000), test(3000)]) - –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–π, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —à–≤–∏–¥—à–µ. –ù–∞–≤—ñ—Ç—å, —è–∫—â–æ –≤—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é
//     .then(data => console.log(data))
//     .catch(err => console.log("error", err))




// ****************************–ü—Ä–∞–∫—Ç–∏–∫–∞************************* \\
// –ù–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –¥–ª—è —ñ–≥—Ä–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
// –î–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –≥–æ—Ç–æ–≤—É —Ä–æ–∑–º—ñ—Ç–∫—É HTML
// —Ç–∞ –±–∞–∑–æ–≤—É —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—é
// –ü—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Start game" –≤ –∫–æ–∂–Ω–æ–º—É –≤—ñ–∫–æ–Ω—Ü—ñ –ø–æ
// —á–µ—Ä–∑—ñ –º–∞—î –∑'—è–≤–ª—è—Ç–∏—Å—å —Å–º–∞–π–ª–∏–∫ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é –≤ 1 —Å–µ–∫—É–Ω–¥—É
// ('ü§ë' –∞–±–æ 'üëø')
// –ü—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–∫–æ–Ω—Ü—è —Å—Ç–≤–æ—Ä–∏ –º–∞—Å–∏–≤ –∑ Promis-–∞–º–∏
// –≤ —è–∫–æ–º—É –∫–æ–∂–µ–Ω –∑ –Ω–∏—Ö –±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –∑–∞ —Å–≤–æ—î –≤—ñ–∫–æ–Ω—Ü–µ,
// –ø—ñ—Å–ª—è —á–æ–≥–æ –æ–±—Ä–æ–±–∏ –¥–∞–Ω–∏–π –º–∞—Å–∏–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É
// Promise.allSettled
// –ü—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ –≤—Å—ñ –≤—ñ–∫–æ–Ω—Ü—è –±—É–ª–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± —Å–∫—Ä—ñ–ø—Ç
// –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞–≤ —á–∏ –≥—Ä–∞–≤–µ—Ü—å –ø–µ—Ä–µ–º—ñ–≥, —á–∏ –Ω—ñ.
// –Ø–∫—â–æ –≤ –∫–æ–∂–Ω–æ–º—É –≤—ñ–∫–æ–Ω—Ü—ñ –æ–¥–Ω–∞–∫–æ–≤–∏–π —Å–º–∞–π–ª–∏–∫ —Ü–µ –æ–∑–Ω–∞—á–∞—î —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
// –ø–µ—Ä–µ–º—ñ–≥
// –í–∏–≤–æ–¥–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –≥—Ä–∏
// ('Winner' –∞–±–æ 'Loser')
// –î–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É basicLightbox
// –ü—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Start game"
// –ø–æ–ª–µ –º–∞—î –æ—á–∏—â–∞—Ç–∏—Å—å, –∞ –≥—Ä–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ –ø–æ—á–∞—Ç–∫—É.


const startBtn = document.querySelector(".js-start");
const container = document.querySelector(".js-container");

startBtn.addEventListener("click", handleStart)

function handleStart() {
    const promise = [...container.children].map(() => createPromise())

    Promise.allSettled(promise)
              .then(items => {
                   console.log(items);
              })
            //   .catch()
}

function createPromise() {
    return new Promise((resolve, reject) => {
        const random = Math.random()

        if(random > 0.5){
            resolve("ü§ë")
        } else {
            reject("üëø")
        }
     })
}


